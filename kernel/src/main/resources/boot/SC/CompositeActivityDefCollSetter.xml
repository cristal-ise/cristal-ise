<!--

    This file is part of the CRISTAL-iSE kernel.
    Copyright (c) 2001-2015 The CRISTAL Consortium. All rights reserved.

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation; either version 3 of the License, or (at
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
    License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this library; if not, write to the Free Software Foundation,
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.

    http://www.fsf.org/licensing/licenses/lgpl.html

-->
<cristalscript>
    <param name="item" type="org.cristalise.kernel.entity.proxy.ItemProxy" />
    <param name="agent" type="org.cristalise.kernel.entity.proxy.AgentProxy" />
    <param name="job" type="org.cristalise.kernel.entity.Job" />
    <output name="errors" type="org.cristalise.kernel.scripting.ErrorInfo" />
    <script language="javascript" name="CompositeActivityDefCollSetter"><![CDATA[
var actDef = agent.unmarshall(job.getOutcomeString());
var newDescColl = actDef.makeActDefCollection(item.getTransactionKey());	

var oldDescColl;
try {
    oldDescColl = item.getObject("/Collection/Activity/last");
}
catch (e) {
    throw "/Collection/Activity/last does not exist!";
}

var newMemIter = oldDescColl.compare(newDescColl).iterator();

var dep = new org.cristalise.kernel.collection.Dependency("Activity");

while (newMemIter.hasNext()) {
    var member = newMemIter.next();
    
	var props = new org.cristalise.kernel.utils.CastorHashMap();
    props.put("Version", member.getProperties().get("Version"), true);
    dep.addMember(member.getItemPath(), props, "", null);
}
agent.execute(item, "AddMembersToCollection", agent.marshall(dep));

params = new Array(3);
params[0] = "Activity";
var oldMemIter = newDescColl.compare(oldDescColl).iterator();

while (oldMemIter.hasNext()) {
    var member = oldMemIter.next()  
    params[1] = member.getID();
    params[2] = member.getItemPath();
    agent.execute(item, "RemoveSlotFromCollection", params);
}
    ]]></script>
</cristalscript>