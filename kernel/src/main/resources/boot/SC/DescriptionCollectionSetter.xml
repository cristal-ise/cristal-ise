<!--

    This file is part of the CRISTAL-iSE kernel.
    Copyright (c) 2001-2015 The CRISTAL Consortium. All rights reserved.

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation; either version 3 of the License, or (at
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
    License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this library; if not, write to the Free Software Foundation,
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.

    http://www.fsf.org/licensing/licenses/lgpl.html

-->
<cristalscript>
    <param name="item" type="org.cristalise.kernel.entity.proxy.ItemProxy"/>
    <param name="agent" type="org.cristalise.kernel.entity.proxy.AgentProxy"/>
    <param name="job" type="org.cristalise.kernel.entity.Job"/>
    <output name="errors" type="org.cristalise.kernel.scripting.ErrorInfo"/>
    <script language="javascript" name="DescriptionCollectionSetter"><![CDATA[
var objType = job.getActPropString("ObjectType");

if (objType == null || objType.isEmpty()) 
throw "Script:DescriptionCollectionSetter - ObjectType not specified in ActProps of Job.";

var descColl = item.getObject("/Collection/"+objType+"/last");
var objName  = job.getOutcome().getField("ObjectID");
var objVer   = job.getOutcome().getField("Version");

if (objName != null && !objName.isEmpty()) {
    var newObjItemPath;

    if      (objType.equals("Schema"))       newObjItemPath = org.cristalise.kernel.utils.LocalObjectLoader.getSchema(      objName, objVer).getItemPath();
    else if (objType.equals("Script"))       newObjItemPath = org.cristalise.kernel.utils.LocalObjectLoader.getScript(      objName, objVer).getItemPath();
    else if (objType.equals("Query"))        newObjItemPath = org.cristalise.kernel.utils.LocalObjectLoader.getQuery(       objName, objVer).getItemPath();
    else if (objType.equals("StateMachine")) newObjItemPath = org.cristalise.kernel.utils.LocalObjectLoader.getStateMachine(objName, objVer).getItemPath();
    else {
        var searchProps = new Array(2);

        searchProps[0] = new org.cristalise.kernel.property.Property("Name", objName);
        searchProps[1] = new org.cristalise.kernel.property.Property("Type", objType);

        var foundItems = org.cristalise.kernel.process.Gateway.getLookup().search(new org.cristalise.kernel.lookup.DomainPath("/"), searchProps);

        if(foundItems.hasNext()) {
            newObjItemPath = foundItems.next().getItemPath();
            if(foundItems.hasNext())
                throw "Script:DescriptionCollectionSetter - Umbiguous Lookup.search(props Name:"+objName+", Type:"+objType+")";
        }
        else
            throw "Script:DescriptionCollectionSetter - Nothing found for Lookup.search(props Name:"+objName+", Type:"+objType+")";
    }

    //TODO: implement multiplicity check (could be based on a property) instead of hardcoded value
    if ((objType.equals("Schema") || objType.equals("Script") || objType.equals("Query") || objType.equals("StateMachine")) && descColl.size() > 0) {
        var params = new Array(2);
        params[0] = objType;
        params[1] = descColl.getMembers().list.iterator().next().getID();

        agent.execute(item, "RemoveSlotFromCollection", params);
    }

    var props = new org.cristalise.kernel.utils.CastorHashMap();
    props.put("Version", objVer, true);

    var dep = new org.cristalise.kernel.collection.Dependency(objType);
    dep.addMember(newObjItemPath, props, "", null);

    agent.execute(item, "AddMembersToCollection", agent.marshall(dep));
}
    ]]></script>
</cristalscript>