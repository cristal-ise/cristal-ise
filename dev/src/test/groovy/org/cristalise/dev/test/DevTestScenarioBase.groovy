/**
 * This file is part of the CRISTAL-iSE Development Module.
 * Copyright (c) 2001-2017 The CRISTAL Consortium. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 3 of the License, or (at
 * your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 *
 * http://www.fsf.org/licensing/licenses/lgpl.html
 */
package org.cristalise.dev.test

import static org.cristalise.kernel.graph.model.BuiltInVertexProperties.VERSION

import org.cristalise.dev.dsl.DevItemDSL
import org.cristalise.dev.dsl.DevXMLUtility
import org.cristalise.kernel.collection.BuiltInCollections
import org.cristalise.kernel.collection.DependencyMember
import org.cristalise.kernel.common.ObjectNotFoundException
import org.cristalise.kernel.entity.proxy.ItemProxy
import org.cristalise.kernel.lifecycle.instance.predefined.Erase
import org.cristalise.kernel.persistency.ClusterType
import org.cristalise.kernel.persistency.outcome.Outcome
import org.cristalise.kernel.persistency.outcome.Schema
import org.cristalise.kernel.utils.LocalObjectLoader

import groovy.transform.CompileStatic

@CompileStatic
class DevTestScenarioBase extends DevItemDSL {

    public ItemProxy createItemWithUpdateAndCheck(Map record, String factoryPath) {
        ItemProxy factory = agent.getItem(factoryPath)
        String itemRoot = factory.getProperty('Root')
        String itemName = record.Name ?: ''
        Schema updateSchema = getUpdateSchema(factory)

        if (itemName) eraseItemIfExists(itemRoot, itemName)
        ItemProxy item = createItemAndCheck(factory, itemRoot, itemName)
        itemName = item.getName()

        //Name could be the generated by the Factory
        record.Name = itemName

        updateItemAndCheck(item, itemRoot, itemName, updateSchema, record)

        return item
    }

    public ItemProxy createItemAndCheck(ItemProxy factory, String itemRoot, String itemName) {
        def createJob  = factory.getJobByTransitionName('InstantiateItem', 'Done', agent)
        assert createJob, "Cannot get Job for Activity 'InstantiateItem' of Factory '$factory.path'"

        def outcome = createJob.getOutcome()

        //Name could be the generated by the Factory
        if (itemName) outcome.setField('Name', itemName)

        def result = agent.execute(createJob)

        //Name could be the generated by the Factory
        if (!itemName) {
            def o = new Outcome(result)
            itemName = o.getField('Name')
        }

        return agent.getItem("$itemRoot/$itemName")
    }

    public void updateItemAndCheck(ItemProxy newItem, String itemRoot, String itemName, Schema updateSchema, Map record) {
        def itemUpdateJob = newItem.getJobByName('Update', agent)
        assert itemUpdateJob, "Cannot get Job for Activity 'Update' of Item '$itemRoot/$itemName'"

        def updateOutcome = itemUpdateJob.getOutcome()

        itemUpdateJob.setOutcome(new Outcome(DevXMLUtility.recordToXML(updateSchema.getName(), record), updateSchema))

        agent.execute(itemUpdateJob)

        //Checks viewpoint of Update outcome
        newItem.getViewpoint(updateSchema.getName(), 'last')
    }

    /**
     *
     * @param record
     * @param factoryPath
     * @return
     */
    public ItemProxy createItemWithConstructorAndCheck(Map record, String factoryPath) {
        ItemProxy factory = agent.getItem(factoryPath)
        String itemRoot = factory.getProperty('Root')
        String itemName = record.Name ?: ''
        Schema updateSchema = getUpdateSchema(factory)

        if (itemName) eraseItemIfExists(itemRoot, itemName)

        def createJob  = factory.getJobByTransitionName('InstantiateItem', 'Done', agent)
        assert createJob, "Cannot get Job for Activity 'InstantiateItem' of Factory '$factory.path'"

        def outcome = createJob.getOutcome()
        //Name could be the generated by the Factory
        if (itemName) outcome.setField('Name', itemName)
        outcome.appendXmlFragment "/CrudFactory_NewInstanceDetails/SchemaInitialise", DevXMLUtility.recordToXML(updateSchema.getName(), record)

        def result = agent.execute(createJob)

        //Name could be the generated by the Factory
        if (!itemName) {
            def o = new Outcome(result)
            itemName = o.getField('Name')
        }

        def item = agent.getItem("$itemRoot/$itemName")

        //Checks viewpoint of Update outcome
        item.getViewpoint(updateSchema.getName(), 'last')

        return item
    }

    /**
     *
     * @param factory
     * @return
     */
    public Schema getUpdateSchema(ItemProxy factory) {
        if (factory.checkContent(ClusterType.COLLECTION, BuiltInCollections.SCHEMA_INITIALISE.name)) {
            def initSchemaCollection = factory.getCollection(BuiltInCollections.SCHEMA_INITIALISE)
            DependencyMember member = initSchemaCollection.getMembers().list[0]

            def updateSchemaUUID = member.getChildUUID()
            def updateSchemaVersion = member.getProperties().getBuiltInProperty(VERSION)
            if (updateSchemaVersion instanceof String) updateSchemaVersion = Integer.parseInt(updateSchemaVersion)

            return LocalObjectLoader.getSchema(updateSchemaUUID, (Integer)updateSchemaVersion)
        }
        else {
            def nameAndVersion = factory.getProperty('UpdateSchema').split(':')
            return LocalObjectLoader.getSchema(nameAndVersion[0], Integer.parseInt(nameAndVersion[1]))
        }
    }


    /*     * 
     * @param itemRoot
     * @param itemName
     */
    public void eraseItemIfExists(String itemRoot, String itemName) {
        if (itemName) {
            try {
                agent.execute(agent.getItem("$itemRoot/$itemName"), Erase.class);
            }
            catch (ObjectNotFoundException e) {}
        }
    }
}
