import static org.cristalise.kernel.collection.BuiltInCollections.AGGREGATE_SCRIPT
import static org.cristalise.kernel.collection.BuiltInCollections.MASTER_SCHEMA
import static org.cristalise.kernel.collection.BuiltInCollections.SCHEMA_INITIALISE
import static org.cristalise.kernel.collection.BuiltInCollections.SCHEMA_INITIALISE

/**
 * @{item} Item
 */
def @{item} = Schema('@{item}', @{version}) {
    struct(name:' @{item}', documentation: '@{item} aggregated data') {
        field(name: 'Name',        type: 'string')
        field(name: 'State',       type: 'string', values: states)
        field(name: 'Description', type: 'string')
    }
}

def @{item}Details = Schema('@{item}_Details', @{version}) {
    struct(name: '@{item}_Details') {
@if{generatedName}
        field(name: 'Name', type: 'string') { dynamicForms (disabled: true, label: 'ID') }
@else{}
        field(name: 'Name', type: 'string')
@end{}
        field(name: 'Description', type: 'string')
    }
}

def @{item}UpdateAct = Activity('@{item}_Update', @{version}) {
    Property('OutcomeInit': 'Empty')
    Schema(@{item}Details)
    //Script('Entity_ChangeName', @{version})
}

def @{item}AggregateScript = Script('@{item}_Aggregate', @{version}) {
    input('item', 'org.cristalise.kernel.entity.proxy.ItemProxy')
    output('@{item}XML', 'java.lang.String')
    script('groovy', moduleDir+'/script/@{item}_Aggregate.groovy')
}

def @{item}QueryListScript = Script('@{item}_QueryList', @{version}) {
    input('item', 'org.cristalise.kernel.entity.proxy.ItemProxy')
    output('@{item}Map', 'java.util.Map')
    script('groovy', moduleDir+'/script/@{item}_QueryList.groovy')
}

Activity('@{item}_Aggregate', @{version}) {
    Property('OutcomeInit': 'Empty')
    Property('Agent Role': 'UserCode')

    Schema(@{item})
    Script(@{item}AggregateScript)
}

def @{item}Wf = Workflow('@{item}_Workflow', @{version}) {
    ElemActDef(@{item}UpdateAct)
    CompActDef('State_Manage', @{version})
}

def @{item}PropDesc = PropertyDescriptionList('@{item}', @{version}) {
    PropertyDesc(name: 'Name',  isMutable: true,  isClassIdentifier: false)
    PropertyDesc(name: 'Type',  isMutable: false, isClassIdentifier: true,  defaultValue: '@{item}')
    PropertyDesc(name: 'State', isMutable: true,  isClassIdentifier: false, defaultValue: 'ACTIVE')
}

Item(name: '@{item}Factory', version: @{version}, folder: '/@{moduleNs}', workflow: 'CrudFactory_Workflow', workflowVer: @{version}) {
    InmutableProperty('Type': 'Factory')
    InmutableProperty('Root': '@{moduleNs}/@{item}s')
@if{generatedName}
    InmutableProperty('IDPrefix': '@{idPrefix}')
    Property('LeftPadSize': '@{leftPadSize}')
@end{}

@if{isAgent}
    InmutableProperty('CreateAgent': 'true')
    Property('DefaultRoles': 'Admin')
@end{}

@if{useConstructor}
    Dependency(SCHEMA_INITIALISE) {
        Member(itemPath: '/desc/Schema/@{moduleNs}/@{item}_Details') {
            Property('Version': @{version})
        }
    }
@else{}
    InmutableProperty('UpdateSchema': '@{item}_Details:@{version}')
@end{}

    Outcome(schema: 'PropertyDescription', version: '@{version}', viewname: 'last', path: 'boot/property/@{item}_@{version}.xml')

    Dependency('workflow') {
        Member(itemPath: '/desc/ActivityDesc/@{moduleNs}/@{item}_Workflow') {
            Property('Version': @{version})
        }
    }

    Dependency(MASTER_SCHEMA) {
        Member(itemPath: '/desc/Schema/@{moduleNs}/@{item}') {
            Property('Version': @{version})
        }
    }

    Dependency(AGGREGATE_SCRIPT) {
        Member(itemPath: '/desc/Script/@{moduleNs}/@{item}_Aggregate') {
            Property('Version': @{version})
        }
    }
}
