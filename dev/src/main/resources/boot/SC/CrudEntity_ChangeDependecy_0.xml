<cristalscript>
  <param name="item" type="org.cristalise.kernel.entity.proxy.ItemProxy"/>
  <script language="groovy" name="CrudEntity_ChangeDependecy"><![CDATA[ import static org.cristalise.kernel.graph.model.BuiltInVertexProperties.*

import org.cristalise.kernel.collection.Dependency
import org.cristalise.kernel.common.InvalidDataException
import org.cristalise.kernel.entity.agent.Job
import org.cristalise.kernel.entity.proxy.AgentProxy
import org.cristalise.kernel.entity.proxy.ItemProxy
import org.cristalise.kernel.lifecycle.instance.predefined.AddMembersToCollection
import org.cristalise.kernel.lifecycle.instance.predefined.RemoveMembersFromCollection
import org.cristalise.kernel.persistency.outcome.Outcome
import org.cristalise.kernel.utils.CastorHashMap
import org.slf4j.Logger
import org.slf4j.LoggerFactory

import groovy.transform.CompileStatic
import groovy.transform.Field

@Field
final Logger log = LoggerFactory.getLogger("org.cristalise.dev.Script.CrudEntity_ChangeDependecy")


/**
 * 
 * @param dependencyName
 * @param outcome
 * @return
 */
@CompileStatic
def Dependency processAddMembersToCollection(AgentProxy theAgent, Job theJob, String dependencyName, Outcome outcome) {
    def memberPath = outcome.getField('MemberPath')
    def memberName = outcome.getField('MemberName')

    if (!memberPath && !memberName) {
        log.error('processAddMembersToCollection() - MemberPath and MemberPath is missing from outcome:{}', outcome)
        throw new InvalidDataException('Please provide MemberPath or MemberPath')
    }

    def dep = new Dependency(dependencyName)

    if (memberPath) {
        dep.addMember(theAgent.getItem(memberPath).getPath(), new CastorHashMap(), '', null);
    }
    else {
        // find the item in the 'default' location eg. /integTest/Patients/kovax
        def moduleNs = theJob.getActProp('ModuleNameSpace')
        dep.addMember(theAgent.getItem("$moduleNs/$dependencyName/$memberName").getPath(), new CastorHashMap(), '', null);
    }

    return dep
}

/**
 * 
 * @param dependencyName
 * @param outcome
 * @return
 */
@CompileStatic
def Dependency processRemoveMembersFromCollection(ItemProxy theItem, AgentProxy theAgent, Job theJob, String dependencyName, Outcome outcome) {
    def memberSlotId = outcome.getField('MemberSlotId')
    def dep = new Dependency(dependencyName)

    if (memberSlotId) {
        def currDep = (Dependency)theItem.getCollection(dependencyName)
        def member = currDep.getMember(memberSlotId as int)

        dep.addMember(member)
    }
    else {
        log.error('processRemoveMembersFromCollection() - MemberSlotId is missing from outcome:{}', outcome)
        throw new InvalidDataException('Please provide MemberSlotId')
    }

    return dep
}

/*
 * Script starts here 
 */
Outcome outcome = job.getOutcome()
def dependencyName = job.getActProp(DEPENDENCY_NAME)
def predefinedStep = job.getActProp(PREDEFINED_STEP)

if (predefinedStep == AddMembersToCollection.class.getSimpleName()) {
    def dep = processAddMembersToCollection(agent, job, dependencyName, outcome)
    outcome.appendXmlFragment('//AddMembersToCollection', agent.marshall(dep))
}
else if (predefinedStep == RemoveMembersFromCollection.class.getSimpleName()) {
    def dep = processRemoveMembersFromCollection(item, agent, job, dependencyName, outcome)
    outcome.appendXmlFragment('//RemoveMembersFromCollection', agent.marshall(dep))
}
else {
    throw new InvalidDataException("Script CrudEntity_ChangeDependecy cannot handle predefined step:"+predefinedStep);
}

 ]]></script>
</cristalscript>
