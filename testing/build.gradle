import com.wiredforcode.gradle.spawn.*

plugins {
    id 'org.unbroken-dome.test-sets' version '1.1.0'
    id 'com.wiredforcode.spawn' version '0.6.0'
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'project-report'

group = 'org.cristalise'
version = '3.1-SNAPSHOT'

description = "Cristal Testing Module"

buildDir = 'target'
sourceCompatibility = 1.7
targetCompatibility = 1.7

//customizing the eclipse classes output directory
eclipse {
    classpath {
        defaultOutputDir = file("$buildDir/eclipseClasses")
    }
}

//Declaration of tetsSets (could be more than one) using the org.unbroken-dome.test-sets plugin
testSets {
    integrationTest { dirName = 'integration-test' }
}

project.integrationTest {
    //ensure that integration tests are run every time when you invoke
    outputs.upToDateWhen { false }
}

//This would be ideal solution if it could spawn a separate process
task execInMemoryServer(type: JavaExec) {
    main = 'org.cristalise.kernel.process.StandardServer'
    classpath = sourceSets.main.runtimeClasspath
    args = ['-logLevel', 8, '-config', 'src/test/conf/testServer.conf', '-connect', 'src/test/conf/testInMemory.clc']
}

task spawnInMemoryServer << {
    ant.java(classname: 'org.cristalise.kernel.process.StandardServer',  classpath: sourceSets.main.runtimeClasspath.asPath, fork: true, spawn: true) {
        arg(value: "-logLevel")
        arg(value: "1")
        arg(value: "-logFile")
        arg(value: "target/tmp/spanwInMemoryServer.log")
        arg(value: "-config")
        arg(value: "src/test/conf/testServer.conf")
        arg(value: "-connect")
        arg(value: "src/test/conf/testInMemory.clc")
    }
}

task startInMemoryServer(type: SpawnProcessTask) {
    command "java -cp " + sourceSets.main.runtimeClasspath.asPath + "org.cristalise.kernel.process.StandardServer"
    ready 'CRISTAL-iSE InMemoryServer was started!'
}

task stopInMemoryServer(type: KillProcessTask)


//check task fails the build if there are failing integration tests.
//check.dependsOn integrationTest

//unit tests are run before our integration tests
integrationTest.mustRunAfter test

integrationTest.dependsOn spawnInMemoryServer

//HTML reports of unit and integration tests are written into different directories.
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// In this section declare where to find the dependencies
repositories {
    mavenLocal()   //location for cristalise-kernel 3.1-SNAPSHOT
    mavenCentral() //equivalent to 'maven { url "http://repo.maven.apache.org/maven2" }'
    maven { url "http://dev.cccs.uwe.ac.uk:8081/nexus/content/repositories/releases" }
    maven { url "http://dev.cccs.uwe.ac.uk:8081/nexus/content/repositories/snapshots" }
    maven { url "http://dev.cccs.uwe.ac.uk:8081/nexus/content/repositories/public" }
    jcenter() //Bintray's JCenter repository
}

//In this section declare the dependencies of production and test code
dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.3'

    compile group: 'org.cristalise', name: 'cristalise-kernel', version:'3.1-SNAPSHOT'
//    compile(group: 'org.cristalise', name: 'cristalise-dev',   version: '3.1-SNAPSHOT') { exclude group: 'org.cristalise' }
//    compile group: 'org.cristalise', name: 'cristalise-xmldb', version:'1.0'
//    compile group: 'org.cristalise', name: 'cristalise-ldap',  version:'3.1-SNAPSHOT'

    testCompile 'commons-lang:commons-lang:2.6'
    testCompile 'junit:junit:4.11'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testRuntime 'com.athaydes:spock-reports:1.2.7'

    //example to use the new integrationTest test set
    //integrationTestCompile 'org.assertj:assertj-core:3.0.0'
}

test {
    testLogging { exceptionFormat = 'full' }
}